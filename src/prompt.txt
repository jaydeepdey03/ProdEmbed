# This prompt is designed to help an AI model understand code examples from Solidity programming languages to Cairo Programming Language and vice-versa. The goal is to enable the AI model to generate equivalent code in the second language based on the provided example in the first language and vice-versa.

Data Type in solidity and Cairo


# Example 1: Solidity to Cairo


string in solidity is equivalent to ByteArray in Cairo

# Solidity code:

```
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Counter {
    uint256 private counter;
    uint256[] private values; // Updated array to uint256 for consistency

    // Events
    event CounterUpdated(address indexed updater, uint256 newCounter);
    event ValueAddedToArray(address indexed sender, uint256 value);

    // Constructor to initialize the counter
    constructor() {
        counter = 0;
    }

    // Function to update the counter value
    function setCounter(uint256 _counter) public {
        counter = _counter;
        emit CounterUpdated(msg.sender, _counter);
    }

    // Function to retrieve the current counter value
    function getCounterValue() public view returns (uint256) {
        return counter;
    }

    // Function to increment the counter value
    function incrementCounter() public {
        counter++;
        emit CounterUpdated(msg.sender, counter);
    }

    // Function to decrement the counter value
    function decrementCounter() public {
        require(counter > 0, "Counter can't be negative");
        counter--;
        emit CounterUpdated(msg.sender, counter);
    }

    // Function to add a value to the array
    function addValueToArray(uint256 _value) public {
        values.push(_value);
        emit ValueAddedToArray(msg.sender, _value);
    }

    // Function to get the length of the array
    function getArrayLength() public view returns (uint256) {
        return values.length;
    }

    // Function to get a value from the array by index
    function getArrayValue(uint256 index) public view returns (uint256) {
        require(index < values.length, "Index out of bounds");
        return values[index];
    }
}
```

# Cairo equivalent:


```
use core::starknet::{ContractAddress};

// Define an interface `ICounter` for interacting with the contract
#[starknet::interface]
pub trait ICounter<TContractState> {
    fn set_count(ref self: TContractState, new_count: u64); // Sets the `count` value
    fn get_count(self: @TContractState) -> u64; // Gets the current `count` value
    fn increase_count(ref self: TContractState); // Increases the `count` by 1
    fn decrease_count(ref self: TContractState); // Decreases the `count` by 1
    fn get_user(self: @TContractState) -> ContractAddress; // Returns the caller's address

    // Functions to manage an array
    fn add_value_to_array(ref self: TContractState, value: u64); // Adds a value to the array
    fn get_array_length(self: @TContractState) -> u64; // Gets the array's length
    fn get_array(self: @TContractState) -> Array<u64>; // Returns the entire array
    // Modify a specific index of the array
    fn modify_nth_address(ref self: TContractState, index: u64, value: u64);
    fn get_array_element(
        self: @TContractState, index: u64,
    ) -> Option<u64>; // Gets an element by index

    // Functions for managing a mapping
    fn setMap(ref self: TContractState, value: u64); // Maps a `value` to the caller's address
    fn getMap(
        self: @TContractState, value: u64,
    ) -> ContractAddress; // Gets the mapped address for a `value`


    fn add_user_to_array(ref self: TContractState, value: ByteArray);
}

#[starknet::contract]
mod Counter {
    use super::ICounter;
    use core::starknet::{ContractAddress, get_caller_address};
    use core::starknet::storage::{
        StoragePointerReadAccess, StoragePointerWriteAccess, Vec, VecTrait, MutableVecTrait, Map,
        StoragePathEntry,
    };

    // Define the storage structure for the contract
    #[storage]
    pub struct Storage {
        count: u64, // Holds a single count value
        arr: Vec<u64>, // A vector to store u64 values
        address_mapping: Map<
            u64, ContractAddress,
        > // A mapping of u64 keys to ContractAddress values


        user_arr: Vec<ByteArray>,
        boolean_arr: Vec<boo>,
    }

    // Constructor to initialize the contract's state
    #[constructor]
    fn constructor(ref self: ContractState) {
        self.count.write(0); // Initialize the count to 0
    }

    // Events emitted by the contract
    #[event]
    #[derive(Drop, starknet::Event)]
    pub enum Event {
        CounterEmission: CounterEmission, // Emitted when `count` changes
        ArrayValueAddition: ArrayValueAddition // Emitted when a value is added to the array
    }

    // Event structure for `CounterEmission`
    #[derive(Drop, starknet::Event)]
    pub struct CounterEmission {
        pub counter: u64 // The new value of `count`
    }

    // Event structure for `ArrayValueAddition`
    #[derive(Drop, starknet::Event)]
    pub struct ArrayValueAddition {
        pub value: u64 // The value added to the array
    }

    // Implementation of the `ICounter` interface
    #[abi(embed_v0)]
    impl CounterImpl of ICounter<ContractState> {
        // Sets the `count` value and emits an event
        fn set_count(ref self: ContractState, new_count: u64) {
            self.count.write(new_count);
            self.emit(CounterEmission { counter: new_count });
        }

        // Returns the current value of `count`
        fn get_count(self: @ContractState) -> u64 {
            self.count.read()
        }

        // Increases the value of `count` by 1
        fn increase_count(ref self: ContractState) {
            assert!(self.count.read() > 0, "Count cannot be negative");
            self.count.write(self.count.read() + 1);
            self.emit(CounterEmission { counter: self.count.read() });
        }

        // Decreases the value of `count` by 1
        fn decrease_count(ref self: ContractState) {
            assert!(self.count.read() > 0, "Count cannot be negative");
            self.count.write(self.count.read() - 1);
            self.emit(CounterEmission { counter: self.count.read() });
        }

        // Returns the caller's contract address
        fn get_user(self: @ContractState) -> ContractAddress {
            let owner = get_caller_address();
            owner
        }

        // Adds a value to the `arr` vector and emits an event
        fn add_value_to_array(ref self: ContractState, value: u64) {
            self.arr.append().write(value);
            self.emit(ArrayValueAddition { value });
        }

        fn add_user_to_array(ref self: ContractState, value: ByteArray) {
            self.user_arr.append().write(value);
        }

        // Returns the length of the `arr` vector
        fn get_array_length(self: @ContractState) -> u64 {
            self.arr.len() // len() returns u64
        }

        // Gets an element from the array at the specified index
        fn get_array_element(self: @ContractState, index: u64) -> Option<u64> {
            if let Option::Some(storage_ptr) = self.arr.get(index) {
                return Option::Some(storage_ptr.read());
            }
            return Option::None;
        }

        // Modifies the value at a specific index in the array
        fn modify_nth_address(ref self: ContractState, index: u64, value: u64) {
            if let Option::Some(storage_ptr) = self.arr.get(index) {
                storage_ptr.write(value);
            } else {
                panic!("Index out of bounds");
            }
        }

        // Returns the entire array as a new array
        fn get_array(self: @ContractState) -> Array<u64> {
            let mut arr1 = array![];
            for i in 0..self.arr.len() {
                arr1.append(self.arr.at(i).read());
            };
            arr1
        }

        // Sets a mapping of `value` to the caller's contract address
        fn setMap(ref self: ContractState, value: u64) {
            let caller = get_caller_address();
            self.address_mapping.entry(value).write(caller);
        }

        // Gets the address mapped to a given `value`
        fn getMap(self: @ContractState, value: u64) -> ContractAddress {
            self.address_mapping.entry(value).read()
        }
    }
}

```

# Example 2: Solidity to Cairo ERC20 Code

# Solidity code:
```
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Counter {
    uint256 private counter;
    uint256[] private values; // Updated array to uint256 for consistency

    // Events
    event CounterUpdated(address indexed updater, uint256 newCounter);
    event ValueAddedToArray(address indexed sender, uint256 value);

    // Constructor to initialize the counter
    constructor() {
        counter = 0;
    }

    // Function to update the counter value
    function setCounter(uint256 _counter) public {
        counter = _counter;
        emit CounterUpdated(msg.sender, _counter);
    }

    // Function to retrieve the current counter value
    function getCounterValue() public view returns (uint256) {
        return counter;
    }

    // Function to increment the counter value
    function incrementCounter() public {
        counter++;
        emit CounterUpdated(msg.sender, counter);
    }

    // Function to decrement the counter value
    function decrementCounter() public {
        require(counter > 0, "Counter can't be negative");
        counter--;
        emit CounterUpdated(msg.sender, counter);
    }

    // Function to add a value to the array
    function addValueToArray(uint256 _value) public {
        values.push(_value);
        emit ValueAddedToArray(msg.sender, _value);
    }

    // Function to get the length of the array
    function getArrayLength() public view returns (uint256) {
        return values.length;
    }

    // Function to get a value from the array by index
    function getArrayValue(uint256 index) public view returns (uint256) {
        require(index < values.length, "Index out of bounds");
        return values[index];
    }
}

```

# Cairo equivalent:
```
// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts for Cairo ^0.20.0

#[starknet::contract]
mod MyERC20Token {
    use openzeppelin::access::ownable::OwnableComponent;
    use openzeppelin::token::erc20::{ERC20Component, ERC20HooksEmptyImpl};
    use starknet::ContractAddress;


    // The path to the component path::to::component.
    // The name of the variable in your contract's storage referring to this component's storage
    // (e.g. ownable).
    // The name of the variant in your contract's event enum referring to this component's events
    // (e.g. OwnableEvent).
    component!(path: ERC20Component, storage: erc20, event: ERC20Event);
    component!(path: OwnableComponent, storage: ownable, event: OwnableEvent);

    // External
    #[abi(embed_v0)]
    impl ERC20MixinImpl = ERC20Component::ERC20MixinImpl<ContractState>;
    #[abi(embed_v0)]
    impl OwnableMixinImpl = OwnableComponent::OwnableMixinImpl<ContractState>;

    // Internal
    impl ERC20InternalImpl = ERC20Component::InternalImpl<ContractState>;
    impl OwnableInternalImpl = OwnableComponent::InternalImpl<ContractState>;

    #[storage]
    struct Storage {
        #[substorage(v0)]
        erc20: ERC20Component::Storage,
        #[substorage(v0)]
        ownable: OwnableComponent::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        // Sometimes you may have a complex event structure with some nested enums like the
        // following example:
        //  you have more than 2 nested enums, you can use the #[flat] attribute on multiple levels.
        #[flat]
        ERC20Event: ERC20Component::Event,
        #[flat]
        OwnableEvent: OwnableComponent::Event,
    }

    #[constructor]
    fn constructor(ref self: ContractState, owner: ContractAddress) {
        self.erc20.initializer("MyToken", "MTK");
        self.ownable.initializer(owner);
    }


    // generate trait is used to define internal and external functional functions explicitly.
    // #[generate_trait] attribute is a special attribute that tells the compiler to generate a
    // trait
    //definition for the implementation block. This allows you to get rid of the boilerplate code of
    //defining a trait with generic parameters and implementing it for the implementation block.
    //With this attribute, we can simply define the implementation block directly, without any
    //generic parameter, and use self: ContractState in our functions.


    // if you don't provide any attribute, the function will be considered as an internal function.

    #[generate_trait]
    #[abi(per_item)]
    impl ExternalImpl of ExternalTrait {
        #[external(v0)]
        fn mint(ref self: ContractState, recipient: ContractAddress, amount: u256) {
            self.ownable.assert_only_owner();
            self.erc20.mint(recipient, amount);
        }
    }
}
```

# Example 3: Cairo to Solidity

# Solidity code:
```
// SPDX-License-Identifier: MIT
// Compatible with OpenZeppelin Contracts ^5.0.0
pragma solidity ^0.8.22;

import {ERC721} from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC721, Ownable {
    uint256 private _nextTokenId;

    constructor(address initialOwner)
        ERC721("MyToken", "MTK")
        Ownable(initialOwner)
    {}

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _nextTokenId++;
        _safeMint(to, tokenId);
    }
}

```
# Cairo equivalent:

```
#[starknet::contract]
mod MyToken {
    use openzeppelin::access::ownable::OwnableComponent;
    use openzeppelin::introspection::src5::SRC5Component;
    use openzeppelin::token::erc721::{ERC721Component, ERC721HooksEmptyImpl};
    use starknet::ContractAddress;

    component!(path: ERC721Component, storage: erc721, event: ERC721Event);
    component!(path: SRC5Component, storage: src5, event: SRC5Event);
    component!(path: OwnableComponent, storage: ownable, event: OwnableEvent);

    // External
    #[abi(embed_v0)]
    impl ERC721MixinImpl = ERC721Component::ERC721MixinImpl<ContractState>;
    #[abi(embed_v0)]
    impl OwnableMixinImpl = OwnableComponent::OwnableMixinImpl<ContractState>;

    // Internal
    impl ERC721InternalImpl = ERC721Component::InternalImpl<ContractState>;
    impl OwnableInternalImpl = OwnableComponent::InternalImpl<ContractState>;

    #[storage]
    struct Storage {
        #[substorage(v0)]
        erc721: ERC721Component::Storage,
        #[substorage(v0)]
        src5: SRC5Component::Storage,
        #[substorage(v0)]
        ownable: OwnableComponent::Storage,
    }

    #[event]
    #[derive(Drop, starknet::Event)]
    enum Event {
        #[flat]
        ERC721Event: ERC721Component::Event,
        #[flat]
        SRC5Event: SRC5Component::Event,
        #[flat]
        OwnableEvent: OwnableComponent::Event,
    }

    #[constructor]
    fn constructor(ref self: ContractState, owner: ContractAddress) {
        self.erc721.initializer("MyToken", "MTK", "");
        self.ownable.initializer(owner);
    }

    #[generate_trait]
    #[abi(per_item)]
    impl ExternalImpl of ExternalTrait {
        #[external(v0)]
        fn safe_mint(
            ref self: ContractState,
            recipient: ContractAddress,
            token_id: u256,
            data: Span<felt252>,
        ) {
            self.ownable.assert_only_owner();
            self.erc721.safe_mint(recipient, token_id, data);
        }

        #[external(v0)]
        fn safeMint(
            ref self: ContractState,
            recipient: ContractAddress,
            tokenId: u256,
            data: Span<felt252>,
        ) {
            self.safe_mint(recipient, tokenId, data);
        }
    }
}
```